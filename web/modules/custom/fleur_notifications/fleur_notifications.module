<?php

/**
 * @file
 * Defines the Order entity and associated features.
 */

/**
 * Implements hook_theme().
 */
function fleur_notifications_theme($existing, $type, $theme, $path) {
  return [
    'fleur_order_placed' => [
      'variables' => [
        'order_entity' => NULL,
      ],
    ],
    'fleur_order_paid' => [
      'variables' => [
        'order_entity' => NULL,
      ],
    ],
    'fleur_order_completed' => [
      'variables' => [
        'order_entity' => NULL,
        'address' => NULL,
        'country' => NULL
      ],
    ],
    'fleur_order_receipt' => [
      'variables' => [
        'order_entity' => NULL,
        'billing_information' => NULL,
        'billing_address' => NULL,
        'billing_country' => NULL,
        'payment_method' => NULL,
        'paid_time' => NULL,
        'totals' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_fleur_order_placed().
 */
function fleur_notifications_theme_suggestions_fleur_order_placed(array $variables) {
  return fleur_notification_get_order_suggestion_template($variables);
}

/**
 * Implements hook_theme_suggestions_fleur_order_paid().
 */
function fleur_notifications_theme_suggestions_fleur_order_paid(array $variables) {
  return fleur_notification_get_order_suggestion_template($variables);
}

/**
 * Implements hook_theme_suggestions_fleur_order_completed().
 */
function fleur_notifications_theme_suggestions_fleur_order_completed(array $variables) {
  return fleur_notification_get_order_suggestion_template($variables);
}

/**
 * Implements hook_theme_suggestions_fleur_order_completed().
 */
function fleur_notifications_theme_suggestions_fleur_order_receipt(array $variables) {
  return fleur_notification_get_order_suggestion_template($variables);
}

/**
 * @param array $variables
 *   The variables from hook.
 *
 * @return array
 *   The suggestions.
 */
function fleur_notification_get_order_suggestion_template(array $variables){
  $suggestions = [];
  if (isset($variables['order_entity'])) {
    $order = $variables['order_entity'];
    $suggestions[] = $variables['theme_hook_original'] . '__' . $order->bundle();
  }
  return $suggestions;
}

/**
 * Implements hook_mail().
 *
 * Captures the outgoing mail and sets appropriate message body and headers.
 */
function fleur_notifications_mail($key, &$message, $params) {
  if (isset($params['headers'])) {
    $message['headers'] = array_merge($message['headers'], $params['headers']);
  }

  $message['from'] = $params['from'];
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
  if (isset($params['attachments'])) {
    $message['params']['attachments'] = $params['attachments'];
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function fleur_notifications_entity_type_alter(array &$entity_types) {

  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  // Set custom render of order to entity_print handler.
  if (\Drupal::service('module_handler')->moduleExists('entity_print')) {
    $entity_types['commerce_order']->setHandlerClass('entity_print', 'Drupal\fleur_notifications\Renderer\FleurOrderRenderer');
  }
}
